{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Filter/Filter.js","constants/filters.js","App.js","index.js"],"names":["TodoItem","this","props","itemId","title","completed","statusToggle","deleteTodo","className","classNames","type","checked","id","onChange","onClick","React","Component","TodoList","items","onStatusToggle","removeTodo","map","key","Filter","filterName","currentActiveItems","setActiveItems","href","toLowerCase","selected","FILTERS","all","active","App","state","todos","currentId","activeItems","handleTitleChange","event","setState","target","value","toggleTodoStatus","todoId","todo","toggleAllTodosStatus","addTodo","preventDefault","trim","newTodo","filter","setActiveTodos","item","clearCompletedTodos","listFilter","visibleList","numOfActiveTodos","length","onSubmit","placeholder","every","htmlFor","Object","values","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3474fbfe.chunk.js","sourcesContent":["/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  render() {\n    const {\n      itemId,\n      title,\n      completed,\n      statusToggle,\n      deleteTodo,\n    } = this.props;\n\n    return (\n      <li\n        className={classNames({ completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={completed}\n            id={`todo-${itemId}`}\n            onChange={() => statusToggle(itemId)}\n          />\n          <label>\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(itemId)}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  itemId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  statusToggle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({\n  items,\n  onStatusToggle,\n  removeTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map(({ id, title, completed }) => (\n      <TodoItem\n        key={id}\n        title={title}\n        itemId={id}\n        completed={completed}\n        statusToggle={onStatusToggle}\n        deleteTodo={removeTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  onStatusToggle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Filter = ({\n  filterName,\n  currentActiveItems,\n  setActiveItems,\n}) => (\n  <li>\n    <a\n      href={`#/${filterName.toLowerCase()}`}\n      className={classNames({\n        selected: filterName === currentActiveItems,\n      })}\n      onClick={() => setActiveItems(filterName)}\n    >\n      {filterName}\n    </a>\n  </li>\n);\n\nFilter.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  currentActiveItems: PropTypes.string.isRequired,\n  setActiveItems: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Filter } from './components/Filter/Filter';\nimport { FILTERS } from './constants/filters';\n\nexport default class App extends React.Component {\n  state = {\n    todos: [],\n    title: '',\n    currentId: 1,\n    activeItems: FILTERS.all,\n  };\n\n  handleTitleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  }\n\n  toggleTodoStatus = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  toggleAllTodosStatus = ({ target }) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  addTodo = (event) => {\n    event.preventDefault();\n\n    const { title, currentId } = this.state;\n\n    if (!title.trim()) {\n      this.setState({ title: '' });\n\n      return;\n    }\n\n    const newTodo = {\n      id: currentId,\n      title,\n      completed: false,\n    };\n\n    this.setState(state => ({\n      todos: [...state.todos, newTodo],\n      title: '',\n      currentId: state.currentId + 1,\n    }));\n  }\n\n  removeTodo = (todoId) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  setActiveTodos = (item) => {\n    this.setState({ activeItems: item });\n  }\n\n  clearCompletedTodos = () => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  listFilter = (items) => {\n    const { todos } = this.state;\n\n    switch (items) {\n      case FILTERS.active:\n        return todos.filter(todo => !todo.completed);\n\n      case FILTERS.completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  }\n\n  render() {\n    const { todos, title, activeItems } = this.state;\n    const visibleList = this.listFilter(activeItems);\n    const numOfActiveTodos = todos.filter(todo => !todo.completed).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={title}\n              onChange={this.handleTitleChange}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.every(todo => todo.completed)}\n            onChange={this.toggleAllTodosStatus}\n          />\n          {todos.length > 0 && (\n            <label\n              htmlFor=\"toggle-all\"\n            >\n              Mark all as complete\n            </label>\n          )}\n\n          <TodoList\n            items={visibleList}\n            onStatusToggle={this.toggleTodoStatus}\n            removeTodo={this.removeTodo}\n          />\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n\n            <span className=\"todo-count\">\n              {numOfActiveTodos}\n              {' '}\n              item\n              {numOfActiveTodos !== 1 && 's'}\n              {' '}\n              left\n            </span>\n\n            <ul className=\"filters\">\n              {Object.values(FILTERS).map(filter => (\n                <Filter\n                  key={filter}\n                  filterName={filter}\n                  currentActiveItems={activeItems}\n                  setActiveItems={this.setActiveTodos}\n                />\n              ))}\n            </ul>\n\n            {todos.some(todo => todo.completed) && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.clearCompletedTodos}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        )}\n\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}